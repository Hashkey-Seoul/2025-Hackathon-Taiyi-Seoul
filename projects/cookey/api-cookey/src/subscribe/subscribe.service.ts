import {
  Injectable,
  OnModuleInit,
  OnModuleDestroy,
  Logger,
} from "@nestjs/common";
import { Cron, CronExpression } from "@nestjs/schedule";
import { ModelType } from "src/enums/type.enum";
import { ModelmanagerService } from "src/modelmanager/modelmanager.service";
import { Transaction } from "src/schemas/transaction.schema";
import Web3 from "web3";

class EventPoller {
  private web3: Web3;
  private contractAddress: string;
  private abi: any;
  private pollingInterval: number;

  constructor(abi: any, pollingInterval = 3000) {
    // HTTP RPC URLÏùÑ ÌÜµÌï¥ Web3 Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    this.web3 = new Web3(process.env.HASHKEY_TESTNET_RPC_HTTPS);
    this.contractAddress = process.env.TARGET_WALLET;
    this.abi = abi;
    this.pollingInterval = pollingInterval;
  }

  // Ïù¥Î≤§Ìä∏ Ìè¥ÎßÅÏùÑ ÏúÑÌïú Î©îÏÜåÎìú
  async pollEvents() {
    // ÏµúÍ∑º Î∏îÎ°ù Î≤àÌò∏ Í∞ÄÏ†∏Ïò§Í∏∞
    const latestBlock = await this.web3.eth.getBlockNumber();
    console.log("Latest Block Number:", latestBlock);

    // Í≥ºÍ±∞ Ïù¥Î≤§Ìä∏ Ï°∞Ìöå (ÏòàÏãúÎ°ú ÏßÄÎÇú 100Í∞úÏùò Î∏îÎ°ù)
    const fromBlock = latestBlock;
    const toBlock = "latest"; // ÏµúÏã† Î∏îÎ°ùÍπåÏßÄ Ìè¥ÎßÅ

    // Ïù¥Î≤§Ìä∏ ÌïÑÌÑ∞
    const filterOptions = {
      address: process.env.TARGET_WALLET, // ÌäπÏ†ï Ï£ºÏÜåÎ°ú ÌïÑÌÑ∞ÎßÅ
      fromBlock,
      toBlock,
      topics: [], // ÌäπÏ†ï Ïù¥Î≤§Ìä∏Ïùò ÌÜ†ÌîΩÏùÑ ÏßÄÏ†ïÌï† Ïàò ÏûàÏùå (ÌïÑÏöî Ïãú)
    };

    try {
      // Ïù¥Î≤§Ìä∏ Î°úÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
      const logs = await this.web3.eth.getPastLogs(filterOptions);
      if (logs.length > 0) {
        console.log("New Events:", logs);
      } else {
        console.log("No new events found.");
      }
    } catch (error) {
      console.error("Error fetching logs:", error);
    }
  }

  // Ìè¥ÎßÅ ÏãúÏûë Î©îÏÜåÎìú
  startPolling() {
    // Ï£ºÍ∏∞Ï†ÅÏúºÎ°ú Ïù¥Î≤§Ìä∏ Ìè¥ÎßÅ
    setInterval(() => {
      this.pollEvents();
    }, this.pollingInterval); // Í∏∞Î≥∏ 3Ï¥àÎßàÎã§ Ìè¥ÎßÅ
  }
}

const abi = [
  // ABI ÎÇ¥Ïö© ÏûÖÎ†• (Ïù¥Î≤§Ìä∏ Ï†ïÏùò Ìè¨Ìï®)
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
]; // ÏòàÏãúÎ°ú ERC-20 ÌÜ†ÌÅ∞Ïùò Transfer Ïù¥Î≤§Ìä∏ ABI ÏÇ¨Ïö©

// EventPoller Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± ÌõÑ Ìè¥ÎßÅ ÏãúÏûë
const eventPoller = new EventPoller(abi);
// eventPoller.startPolling();

@Injectable()
export class SubscribeService implements OnModuleInit, OnModuleDestroy {
  private web3: Web3;
  private readonly wsRpcUrl = process.env.HASHKEY_TESTNET_RPC_WSS; // WebSocket RPC URL (Ïòà: Infura WebSocket URL)
  private readonly httpRpcUrl = process.env.HASHKEY_TESTNET_RPC_HTTPS;
  private readonly targetAddress = process.env.TARGET_WALLET; // Í∞êÏßÄÌï† Ï£ºÏÜå
  private readonly BASE_URL =
    "https://hashkeychain-testnet-explorer.alt.technology/api/v2";
  private logger = new Logger(SubscribeService.name);

  constructor(private readonly modelManager: ModelmanagerService) {
    this.web3 = new Web3(new Web3.providers.WebsocketProvider(this.wsRpcUrl));
    // console.log(this.wsRpcUrl);
    // console.log(this.targetAddress);
  }

  // WebSocket Ïó∞Í≤∞ Î∞è Î∏îÎ°ù Ïù¥Î≤§Ìä∏ Íµ¨ÎèÖ
  async onModuleInit() {
    this.logger.log(
      "üöÄ Initializing WebSocket connection and event listeners...",
    );

    // WebSocket Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
    this.web3.eth.net
      .isListening()
      .then(() => this.logger.log("‚úÖ WebSocket connected"))
      .catch((e) => this.logger.error("‚ùå WebSocket connection failed", e));

    // ÏÉàÎ°úÏö¥ Î∏îÎ°ù Íµ¨ÎèÖ
    // this.subscribeToNewBlocks();

    // ÌäπÏ†ï Ï£ºÏÜåÎ°ú Î∞úÏÉùÌïú Ìä∏ÎûúÏû≠ÏÖò Î°úÍ∑∏ Íµ¨ÎèÖ
    // this.subscribeToAddressTransactions();
  }

  // ÏÉàÎ°úÏö¥ Î∏îÎ°ù Íµ¨ÎèÖ
  async subscribeToNewBlocks() {
    try {
      // Î∏îÎ°ù Ìó§Îçî Íµ¨ÎèÖ
      const subscription = await this.web3.eth.subscribe("newBlockHeaders");

      subscription.on("data", (blockHeader) => {
        console.log("New Block Header:", blockHeader);
      });

      subscription.on("error", (error) => {
        console.error("Error in newBlockHeaders subscription:", error);
      });
    } catch (error) {
      console.error("Error in subscribeToNewBlocks:", error);
    }
  }

  // ÌäπÏ†ï Î∏îÎ°ùÏóêÏÑú Ìä∏ÎûúÏû≠ÏÖò Ï≤òÎ¶¨
  private async handleBlock(blockNumber: number) {
    try {
      const block = await this.web3.eth.getBlock(blockNumber, true); // Ìä∏ÎûúÏû≠ÏÖò Ï†ïÎ≥¥ÎèÑ Ìè¨Ìï®
      if (block && block.transactions) {
        block.transactions.forEach((tx) => {
          this.logger.log(`Transaction Hash: ${tx.hash}`);
          this.logger.log(`From: ${tx.from}`);
          this.logger.log(`To: ${tx.to}`);
          this.logger.log(
            `Amount: ${this.web3.utils.fromWei(tx.value, "ether")} ETH`,
          );
        });
      }
    } catch (error) {
      this.logger.error(`Error fetching block data: ${error}`);
    }
  }

  // ÌäπÏ†ï Ï£ºÏÜåÎ°ú Î∞úÏÉùÌïú Ìä∏ÎûúÏû≠ÏÖò Î°úÍ∑∏ Íµ¨ÎèÖ
  async subscribeToAddressTransactions() {
    try {
      const logFilter = {
        address: this.targetAddress, // ÌïÑÌÑ∞Î°ú ÌäπÏ†ï Ï£ºÏÜå ÏßÄÏ†ï
        topics: [null], // Î™®Îì† ÌÜ†ÌîΩ Íµ¨ÎèÖ (ÌïÑÏöîÏóê Îî∞Îùº ÏàòÏ†ï Í∞ÄÎä•)
      };

      const subscription = await this.web3.eth.subscribe("logs", logFilter);

      subscription.on("data", (log) => {
        console.log("New Log:", log);
      });

      subscription.on("error", (error) => {
        console.error("Error in logs subscription:", error);
      });
    } catch (error) {
      console.error("Error in subscribeToAddressTransactions:", error);
    }
  }

  // WebSocket Ï¢ÖÎ£å Ïãú Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨
  async onModuleDestroy() {
    this.logger.log("üõë Closing WebSocket connection...");
    const provider = this.web3.currentProvider;

    if (provider && provider instanceof Web3.providers.WebsocketProvider) {
      // WebSocketProviderÏù∏ Í≤ΩÏö∞ close Î©îÏÜåÎìú Ìò∏Ï∂ú
      provider.disconnect();
      this.logger.log("‚úÖ WebSocket connection closed");
    } else {
      this.logger.error("‚ùå Provider is not a WebSocketProvider");
    }
  }

  @Cron(CronExpression.EVERY_10_SECONDS, {
    name: "Fetch transaction",
  })
  async fetchTransaction() {
    const transactionModel = this.modelManager.getModel(ModelType.TRANSACTION);
    const userModel = this.modelManager.getModel(ModelType.USER);
    try {
      const url = `${this.BASE_URL}/addresses/${process.env.TARGET_WALLET}/transactions?filter=to`;
      // console.log(url);

      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const data = await response.json();
      for (const item of data.items) {
        // console.log(item.hash);
        // console.log(item.from.hash);
        // // console.log(item.value);
        // // console.log(item.block_number);
        // console.log(Number(item.value / 10 ** 18));
        const weiToHSK = Number(item.value / 10 ** 18);
        const tx = await transactionModel.findOne({
          hash: item.hash,
          from: { $regex: new RegExp(`^${item.from.hash}$`, "i") },
          value: weiToHSK,
          blockNumber: item.block_number,
        });
        // console.log(tx);
        if (tx == null) {
          const newTx = new Transaction();
          newTx.hash = item.hash;
          newTx.blockNumber = item.block_number;
          newTx.from = item.from.hash;
          newTx.value = weiToHSK;

          await transactionModel.create(newTx);
          const credit = weiToHSK * 1000;
          await userModel.findOneAndUpdate(
            { wallet: newTx.from },
            { $inc: { credit: credit } },
            { upsert: true },
          );
        }
      }
      // console.log("end------------------");
      // console.log(data);
    } catch (error) {}
  }
}
